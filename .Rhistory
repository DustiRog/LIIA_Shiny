installed.packages()
shiny::runApp()
list.of.packages<-c('base','tidyverse','plyr','magrittr','qwraps2','tableone',
'shiny','shinyjs','shinythemes','REDCapExporter')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
library(shiny)
library(shinyjs)
library(shinythemes)
library(tidyverse)
library(plyr)
library(magrittr)
library(qwraps2)
library(tableone)
library(REDCapExporter)
source("helpers.R") # Have the helper functions available
# Create the REDCap connection using the API Token provided
Sys.setenv(REDCap_API_URI = "https://redcap.ucdenver.edu/api/")
Sys.setenv(REDCap_API_TOKEN = as.character(B110DC5187915F25A20275789F018EA4))
Sys.setenv(REDCap_API_TOKEN = as.character("B110DC5187915F25A20275789F018EA4"))
# Patch until REDCapExporter can be updated and pushed to CRAN.
h <- curl::new_handle()
h <- curl::handle_setform(h,
token = Sys.getenv("REDCap_API_TOKEN"),
content = "record",
format = "csv")
records_raw <- curl::curl_fetch_memory(Sys.getenv("REDCap_API_URI"), handle = h)
# records_raw <- export_content("record")
# myData <- as.data.frame(records_raw)
myData <- read.csv(text = rawToChar(records_raw$content))
# metadata_raw <- export_content("metadata")
# metadata <- as.data.frame(metadata_raw)
h <- curl::handle_setform(h, content = "metadata")
metadata_raw <- curl::curl_fetch_memory(Sys.getenv("REDCap_API_URI"), handle = h)
metadata <- read.csv(text = rawToChar(metadata_raw$content))
# Subsetting the data to make it more manageable
records_keepVars<-c("study_id","demo_first_name","demo_last_name","demo_dob","demo_sex",
"demo_race___0","demo_race___1","demo_race___2","demo_race___3",
"demo_race___4","demo_race___5","demo_race___9","demo_ethnicity",
"demo_handedness","demo_educ_yrs","with_inelig_choice",
"with_inelig_dthdte","with_inelig_detail")
# Records event: demographics and withdrawal/ineligibility
rec_myData<-myData[records_keepVars]
rec_myData<-rec_myData %>%
mutate_all(na_if,"")
rec_myData<-rec_myData %>%
drop_na(study_id,demo_first_name,demo_last_name,demo_dob,demo_sex,
demo_ethnicity,demo_handedness,demo_educ_yrs)
# Screening event: screening/consent
screen_keepVars<-c("study_id","consent_scrnfail","consent_scrnfail_det",
"consent_yesno")
screen_myData<-myData[screen_keepVars]
screen_myData<-screen_myData %>%
mutate_all(na_if,"")
screen_myData<-screen_myData[!is.na(screen_myData$consent_scrnfail) |
!is.na(screen_myData$consent_yesno),]
# Baseline event: innate immune history
base_keepVars<-c("study_id","redcap_event_name","immune_date_base")
base_myData<-myData[base_keepVars]
base_myData<-base_myData %>%
mutate_all(na_if,"")
base_myData<-base_myData %>%
drop_na(study_id,immune_date_base)
base_myData<-base_myData[base_myData$redcap_event_name=="baseline_visit_arm_1",]
# Combining the records, screening, and baseline datasets
myData_merge<-merge(rec_myData,base_myData,by="study_id",all.x=TRUE)
myData_merge<-merge(myData_merge,screen_myData,by="study_id",all.x=TRUE)
# Character to numeric
myData_merge$demo_sex<-as.numeric(myData_merge$demo_sex)
myData_merge$demo_ethnicity<-as.numeric(myData_merge$demo_ethnicity)
myData_merge$demo_handedness<-as.numeric(myData_merge$demo_handedness)
myData_merge$demo_educ_yrs<-as.numeric(myData_merge$demo_educ_yrs)
myData_merge$consent_scrnfail<-as.numeric(myData_merge$consent_scrnfail)
myData_merge$consent_yesno<-as.numeric(myData_merge$consent_yesno)
myData_merge$with_inelig_choice<-as.numeric(myData_merge$with_inelig_choice)
# New demographic variables
myData_merge$demo_sex<-ifelse(myData_merge$demo_sex==1,"Female",
ifelse(myData_merge$demo_sex==0,"Male",
ifelse(myData_merge$demo_sex==9,"Prefer not to Answer",NA)))
myData_merge$demo_sex<- factor(myData_merge$demo_sex,levels=c("Female","Male","Prefer not to Answer"))
myData_merge$demo_ethnicity<-ifelse(myData_merge$demo_ethnicity==1,"Not Hispanic or Latino/a",
ifelse(myData_merge$demo_ethnicity==2,"Hispanic or Latino/a",
ifelse(myData_merge$demo_ethnicity==3,"Unknown",
ifelse(myData_merge$demo_ethnicity==9,"Prefer not to Answer",NA))))
myData_merge$demo_ethnicity<- factor(myData_merge$demo_ethnicity,levels=c("Not Hispanic or Latino/a","Hispanic or Latino/a",
"Unknown","Prefer not to Answer"))
myData_merge$demo_handedness<-ifelse(myData_merge$demo_handedness==0,"Right",
ifelse(myData_merge$demo_handedness==1,"Left",
ifelse(myData_merge$demo_handedness==2,"Ambidextrous",
ifelse(myData_merge$demo_handedness==9,"Prefer not to Answer",NA))))
myData_merge$demo_handedness<- factor(myData_merge$demo_handedness,levels=c("Right","Left","Ambidextrous",
"Prefer not to Answer"))
# Creating new race categories
myData_merge$demo_race_NatAmer<-factor(ifelse(myData_merge$demo_race___0==1,"Yes","No"),levels=c("Yes","No"))
myData_merge$demo_race_Asian<-factor(ifelse(myData_merge$demo_race___1==1,"Yes","No"),levels=c("Yes","No"))
myData_merge$demo_race_Black<-factor(ifelse(myData_merge$demo_race___2==1,"Yes","No"),levels=c("Yes","No"))
myData_merge$demo_race_Cauc<-factor(ifelse(myData_merge$demo_race___3==1,"Yes","No"),levels=c("Yes","No"))
myData_merge$demo_race_PacIsl<-factor(ifelse(myData_merge$demo_race___4==1,"Yes","No"),levels=c("Yes","No"))
myData_merge$demo_race_Unkn<-factor(ifelse(myData_merge$demo_race___5==1,"Yes","No"),levels=c("Yes","No"))
myData_merge$demo_race_NoAns<-factor(ifelse(myData_merge$demo_race___9==1,"Yes","No"),levels=c("Yes","No"))
# Creating a new death date variable
myData_merge$death_date<-as.character(as.Date(myData_merge$with_inelig_dthdte))
# Dropping old race and death date variables
drop_rcdth_vars<-names(myData_merge) %in% c("demo_race___0","demo_race___1",
"demo_race___2","demo_race___3",
"demo_race___4","demo_race___5",
"demo_race___9","with_inelig_dthdte")
myData_final<-myData_merge[!drop_rcdth_vars]
myData_final$curr_age<-round(as.numeric(difftime(Sys.Date(),myData_final$demo_dob,
units="days"))/364.25,2)
myData_final$time_diff<-difftime(Sys.Date(),myData_final$immune_date_base,units="days")
myData_final$next_appt<-ifelse(myData_final$time_diff>=150 &
myData_final$time_diff<=210,"6 Month Survey",
ifelse(myData_final$time_diff>=335 &
myData_final$time_diff<=395, "12 Month Survey",
ifelse(myData_final$time_diff>=515 &
myData_final$time_diff<=575, "18 Month Survey",
ifelse(myData_final$time_diff<=669 &
myData_final$time_diff>=789,"2 Year Follow Up",NA))))
table(myData_final$next_appt)
View(myData_final)
myData_final$next_appt<-ifelse(myData_final$time_diff>=150 &
myData_final$time_diff<=210,"6 Month Survey",
ifelse(myData_final$time_diff>=335 &
myData_final$time_diff<=395, "12 Month Survey",
ifelse(myData_final$time_diff>=515 &
myData_final$time_diff<=575, "18 Month Survey",
ifelse(myData_final$time_diff>=669 &
myData_final$time_diff<=789,"2 Year Follow Up",NA))))
table(myData_final$next_appt)
# Create the REDCap connection using the API Token provided
Sys.setenv(REDCap_API_URI = "https://redcap.ucdenver.edu/api/")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
